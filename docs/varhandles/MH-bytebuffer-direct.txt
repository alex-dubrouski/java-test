Secondary result "org.ad.MemoryHandlesBenchmark.rwBBD:·asm":
PrintAssembly processed: 236879 total address lines.
Perf output processed (skipped 69.849 seconds):
 Column 1: cycles (9903 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.ad.MemoryHandlesBenchmark::rwBBD, version 841 (194 bytes)

              0x00007f12477cc66f:   movabs $0x6020238c0,%rdx            ;   {oop(a &apos;java/nio/DirectByteBuffer&apos;{0x00000006020238c0})}
              0x00007f12477cc679:   add    $0x24,%rdx                   ;*getfield segment {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - java.nio.Buffer::checkSegment@1 (line 751)
                                                                        ; - java.nio.DirectByteBuffer::putLong@1 (line 959)
                                                                        ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
                                                                        ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
              0x00007f12477cc67d:   xor    %ebx,%ebx
         ╭    0x00007f12477cc67f:   jmp    0x00007f12477cc695
         │    0x00007f12477cc681:   data16 data16 nopw 0x0(%rax,%rax,1)
         │    0x00007f12477cc68c:   data16 data16 xchg %ax,%ax
  2.90%  │ ↗  0x00007f12477cc690:   mov    0x18(%rsp),%rdx              ;*getstatic bufD {reexecute=0 rethrow=0 return_oop=0}
         │ │                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@8 (line 55)
  1.95%  ↘ │  0x00007f12477cc695:   mov    (%rsp),%r10
  0.57%    │  0x00007f12477cc699:   mov    0xc(%r10),%r11d              ;*getfield posI {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@12 (line 55)
  0.37%    │  0x00007f12477cc69d:   mov    %ebx,%r9d
  2.81%    │  0x00007f12477cc6a0:   add    %r11d,%r9d
  1.91%    │  0x00007f12477cc6a3:   movslq %r11d,%r13                   ;*i2l {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@24 (line 55)
  0.73%    │  0x00007f12477cc6a6:   shl    $0x3,%r9d                    ;*imul {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@19 (line 55)
  0.24%    │  0x00007f12477cc6aa:   test   %r9d,%r9d
          ╭│  0x00007f12477cc6ad:   jl     0x00007f12477cc76e           ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@1 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@6 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  3.03%   ││  0x00007f12477cc6b3:   movabs $0x6020238c0,%r10            ;   {oop(a &apos;java/nio/DirectByteBuffer&apos;{0x00000006020238c0})}
  1.84%   ││  0x00007f12477cc6bd:   mov    0x1c(%r10),%r10d             ;*getfield limit {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@6 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@6 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  0.49%   ││  0x00007f12477cc6c1:   mov    %r10d,%r8d
  0.29%   ││  0x00007f12477cc6c4:   sub    %r9d,%r8d                    ;*isub {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@10 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@6 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  3.06%   ││  0x00007f12477cc6c7:   cmp    $0x8,%r8d
          ││  0x00007f12477cc6cb:   jl     0x00007f12477cc7d4           ;*if_icmple {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@11 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@6 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  1.93%   ││  0x00007f12477cc6d1:   mov    (%rdx),%edi                  ;*getfield segment {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkSegment@1 (line 751)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@1 (line 959)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  0.61%   ││  0x00007f12477cc6d3:   movabs $0x6020238c0,%r8             ;   {oop(a &apos;java/nio/DirectByteBuffer&apos;{0x00000006020238c0})}
  0.42%   ││  0x00007f12477cc6dd:   mov    0x10(%r8),%rcx               ;*getfield address {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.DirectByteBuffer::ix@1 (line 262)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@9 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  2.72%   ││  0x00007f12477cc6e1:   movslq %r9d,%r9                     ;*i2l {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.DirectByteBuffer::ix@5 (line 262)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@9 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  1.83%   ││  0x00007f12477cc6e4:   mov    %r9,%r14
  0.60%   ││  0x00007f12477cc6e7:   add    %rcx,%r14                    ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.DirectByteBuffer::ix@8 (line 262)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@9 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  0.25%   ││  0x00007f12477cc6ea:   test   %edi,%edi
          ││  0x00007f12477cc6ec:   jne    0x00007f12477cc814           ;*ifnull {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkSegment@4 (line 751)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@1 (line 959)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  2.85%   ││  0x00007f12477cc6f2:   movzbl 0x2d(%r8),%r8d               ;*getfield bigEndian {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@15 (line 961)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  1.73%   ││  0x00007f12477cc6f7:   test   %r8d,%r8d
          ││  0x00007f12477cc6fa:   je     0x00007f12477cc888           ;*if_icmpne {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - jdk.internal.misc.Unsafe::convEndian@4 (line 3814)
          ││                                                            ; - jdk.internal.misc.Unsafe::putLongUnaligned@7 (line 3671)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@18 (line 961)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  0.47%   ││  0x00007f12477cc700:   mov    %rcx,%r8                     ;*invokevirtual putLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - jdk.internal.misc.Unsafe::putLongUnaligned@10 (line 3671)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@18 (line 961)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  0.37%   ││  0x00007f12477cc703:   shl    $0x3,%r11d                   ;*imul {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@39 (line 56)
  2.78%   ││  0x00007f12477cc707:   bswap  %r13
  2.23%   ││  0x00007f12477cc70a:   mov    %r13,(%r8,%r9,1)             ;*invokevirtual putLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - jdk.internal.misc.Unsafe::putLongUnaligned@10 (line 3671)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@18 (line 961)
          ││                                                            ; - java.nio.DirectByteBuffer::putLong@13 (line 982)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@25 (line 55)
  2.59%   ││  0x00007f12477cc70e:   test   %r11d,%r11d
          ││  0x00007f12477cc711:   jl     0x00007f12477cc7a8           ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@1 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::getLong@6 (line 948)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@40 (line 56)
  2.22%   ││  0x00007f12477cc717:   sub    %r11d,%r10d                  ;*isub {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@10 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::getLong@6 (line 948)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@40 (line 56)
  1.40%   ││  0x00007f12477cc71a:   cmp    $0x8,%r10d
          ││  0x00007f12477cc71e:   jl     0x00007f12477cc8c8           ;*if_icmple {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.nio.Buffer::checkIndex@11 (line 736)
          ││                                                            ; - java.nio.DirectByteBuffer::getLong@6 (line 948)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@40 (line 56)
  0.36%   ││  0x00007f12477cc724:   mov    %rdx,0x18(%rsp)
  1.57%   ││  0x00007f12477cc729:   mov    %ebx,0x8(%rsp)               ;*invokevirtual getLong {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@40 (line 56)
  2.53%   ││  0x00007f12477cc72d:   movslq %r11d,%r10
  1.50%   ││  0x00007f12477cc730:   mov    (%r8,%r10,1),%rdx
  0.81%   ││  0x00007f12477cc734:   bswap  %rdx                         ;*invokestatic reverseBytes {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - jdk.internal.misc.Unsafe::convEndian@12 (line 3814)
          ││                                                            ; - jdk.internal.misc.Unsafe::getLongUnaligned@8 (line 3550)
          ││                                                            ; - java.nio.DirectByteBuffer::getLong@13 (line 931)
          ││                                                            ; - java.nio.DirectByteBuffer::getLong@12 (line 948)
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@40 (line 56)
  4.72%   ││  0x00007f12477cc737:   mov    0x10(%rsp),%rsi
  1.19%   ││  0x00007f12477cc73c:   movabs $0x6020238c0,%rbp            ;   {oop(a &apos;java/nio/DirectByteBuffer&apos;{0x00000006020238c0})}
  0.27%   ││  0x00007f12477cc746:   nop
  1.05%   ││  0x00007f12477cc747:   callq  0x00007f12477cb650           ; ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Derived_oop_rbp }
          ││                                                            ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@43 (line 56)
          ││                                                            ;   {optimized virtual_call}
  6.34%   ││  0x00007f12477cc74c:   mov    0x8(%rsp),%ebx
  2.40%   ││  0x00007f12477cc750:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.ad.MemoryHandlesBenchmark::rwBBD@46 (line 54)
  0.31%   ││  0x00007f12477cc752:   cmp    $0x186a0,%ebx
          │╰  0x00007f12477cc758:   jl     0x00007f12477cc690           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          │                                                             ; - org.ad.MemoryHandlesBenchmark::rwBBD@5 (line 54)
          │   0x00007f12477cc75e:   add    $0x40,%rsp
          │   0x00007f12477cc762:   pop    %rbp
          │   0x00007f12477cc763:   mov    0x110(%r15),%r10
          │   0x00007f12477cc76a:   test   %eax,(%r10)                  ;   {poll_return}
          │   0x00007f12477cc76d:   retq
          ↘   0x00007f12477cc76e:   mov    $0xffffff45,%esi
              0x00007f12477cc773:   mov    %r10,%rbp
....................................................................................................
 68.24%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 838 (75 bytes)

              0x00007f12477cb624:   shl    $0x3,%r10
              0x00007f12477cb628:   movabs $0x800000000,%r12
              0x00007f12477cb632:   add    %r12,%r10
              0x00007f12477cb635:   xor    %r12,%r12
              0x00007f12477cb638:   cmp    %r10,%rax
              0x00007f12477cb63b:   jne    0x00007f123fc34d80           ;   {runtime_call ic_miss_stub}
              0x00007f12477cb641:   data16 xchg %ax,%ax
              0x00007f12477cb644:   nopl   0x0(%rax,%rax,1)
              0x00007f12477cb64c:   data16 data16 xchg %ax,%ax
            [Verified Entry Point]
  4.13%       0x00007f12477cb650:   mov    %eax,-0x14000(%rsp)
  1.65%       0x00007f12477cb657:   push   %rbp
  3.33%       0x00007f12477cb658:   sub    $0x20,%rsp
  1.66%       0x00007f12477cb65c:   nopl   0x0(%rax)
  1.04%       0x00007f12477cb660:   cmpl   $0x1,0x70(%r15)
  3.03%  ╭    0x00007f12477cb668:   je     0x00007f12477cb673
         │    0x00007f12477cb66e:   callq  Stub::nmethod_entry_barrier  ;*synchronization entry
         │                                                              ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 392)
         │                                                              ;   {runtime_call StubRoutines (2)}
  1.08%  ↘    0x00007f12477cb673:   mov    %rdx,%r10
  0.30%       0x00007f12477cb676:   xor    0x90(%rsi),%r10              ;*getfield l1 {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 392)
  1.41%       0x00007f12477cb67d:   mov    %rdx,%r11
  2.89%       0x00007f12477cb680:   xor    0xa0(%rsi),%r11              ;*lxor {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.jmh.infra.Blackhole::consume@17 (line 394)
  1.03%       0x00007f12477cb687:   cmp    %r11,%r10
          ╭   0x00007f12477cb68a:   je     0x00007f12477cb69c           ;*ifne {reexecute=0 rethrow=0 return_oop=0}
          │                                                             ; - org.openjdk.jmh.infra.Blackhole::consume@19 (line 394)
  0.38%   │   0x00007f12477cb68c:   add    $0x20,%rsp
  1.19%   │   0x00007f12477cb690:   pop    %rbp
  2.98%   │   0x00007f12477cb691:   mov    0x110(%r15),%r10
  0.90%   │   0x00007f12477cb698:   test   %eax,(%r10)                  ;   {poll_return}
  0.37%   │   0x00007f12477cb69b:   retq
          ↘   0x00007f12477cb69c:   cmp    %r11,%r10
              0x00007f12477cb69f:   mov    $0xffffffff,%ebp
           ╭  0x00007f12477cb6a4:   jl     0x00007f12477cb6ae
           │  0x00007f12477cb6a6:   setne  %bpl
           │  0x00007f12477cb6aa:   movzbl %bpl,%ebp                    ;*lcmp {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.jmh.infra.Blackhole::consume@18 (line 394)
           ↘  0x00007f12477cb6ae:   mov    %rsi,(%rsp)
              0x00007f12477cb6b2:   mov    %rdx,0x8(%rsp)
              0x00007f12477cb6b7:   mov    $0xffffff45,%esi
              0x00007f12477cb6bc:   data16 xchg %ax,%ax
....................................................................................................
 27.38%  <total for region 2>

....[Hottest Regions]...............................................................................
 68.24%         c2, level 4  org.ad.MemoryHandlesBenchmark::rwBBD, version 841 (194 bytes)
 27.38%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 838 (75 bytes)
  0.60%           libjvm.so  ElfSymbolTable::lookup (49 bytes)
  0.25%        libc-2.17.so  syscall (21 bytes)
  0.19%           libjvm.so  fileStream::write (50 bytes)
  0.18%  libpthread-2.17.so  [unknown] (4 bytes)
  0.09%        libc-2.17.so  __clone (5 bytes)
  0.09%  libpthread-2.17.so  __libc_nanosleep (42 bytes)
  0.08%        libc-2.17.so  _IO_fwrite (0 bytes)
  0.07%           libjvm.so  xmlStream::write_text (27 bytes)
  0.07%           libjvm.so  xmlStream::write_text (48 bytes)
  0.06%        libc-2.17.so  vfprintf (0 bytes)
  0.05%           libjvm.so  os::elapsedTime (0 bytes)
  0.05%           libjvm.so  defaultStream::write (35 bytes)
  0.04%              kernel  [unknown] (0 bytes)
  0.04%           libjvm.so  os::current_thread_id (10 bytes)
  0.04%           libjvm.so  outputStream::update_position (23 bytes)
  0.03%           libjvm.so  decode_env::print_hook_comments (13 bytes)
  0.03%           libjvm.so  os::naked_short_sleep (0 bytes)
  0.03%           libjvm.so  ShenandoahControlThread::run_service (0 bytes)
  2.36%  <...other 200 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 68.24%         c2, level 4  org.ad.MemoryHandlesBenchmark::rwBBD, version 841
 27.38%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 838
  0.60%           libjvm.so  ElfSymbolTable::lookup
  0.25%        libc-2.17.so  syscall
  0.21%           libjvm.so  fileStream::write
  0.18%  libpthread-2.17.so  [unknown]
  0.15%        libc-2.17.so  _IO_fwrite
  0.15%        libc-2.17.so  vfprintf
  0.15%           libjvm.so  xmlStream::write_text
  0.12%      hsdis-amd64.so  print_insn
  0.10%        libc-2.17.so  __clone
  0.09%  libpthread-2.17.so  __libc_nanosleep
  0.08%           libjvm.so  defaultStream::write
  0.07%           libjvm.so  os::elapsedTime
  0.06%              kernel  [unknown]
  0.06%           libjvm.so  decode_env::handle_event
  0.05%           libjvm.so  ShenandoahControlThread::run_service
  0.05%        libc-2.17.so  _IO_file_xsputn@@GLIBC_2.2.5
  0.05%              [vdso]  __vdso_clock_gettime
  0.04%        libc-2.17.so  __clock_gettime
  1.89%  <...other 133 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 95.62%         c2, level 4
  2.45%           libjvm.so
  1.08%        libc-2.17.so
  0.33%  libpthread-2.17.so
  0.18%         interpreter
  0.15%      hsdis-amd64.so
  0.06%              kernel
  0.05%              [vdso]
  0.03%          ld-2.17.so
  0.01%
  0.01%         c1, level 3
....................................................................................................
 99.98%  <totals>
