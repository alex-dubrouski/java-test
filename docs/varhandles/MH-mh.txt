Secondary result "org.ad.MemoryHandlesBenchmark.rwMH:·asm":
PrintAssembly processed: 236020 total address lines.
Perf output processed (skipped 119.328 seconds):
 Column 1: cycles (24909 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub, version 891 (171 bytes)

            0x00007f5b673ab419:   mov    0x60(%rsp),%rdi
            0x00007f5b673ab41e:   movzbl 0x94(%rdi),%r10d             ; implicit exception: dispatches to 0x00007f5b673ab910
                                                                      ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@27 (line 310)
            0x00007f5b673ab426:   test   %r10d,%r10d
            0x00007f5b673ab429:   jne    0x00007f5b673ab854           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@30 (line 310)
            0x00007f5b673ab42f:   mov    $0x1,%ebx
            0x00007f5b673ab434:   jmpq   0x00007f5b673ab521
            0x00007f5b673ab439:   nopl   0x0(%rax)
  6.14%  ↗  0x00007f5b673ab440:   mov    0x60(%rsp),%rdi
  0.61%  │  0x00007f5b673ab445:   mov    0x70(%rsp),%rbx              ;*getstatic elemHandle {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@8 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.11%  │  0x00007f5b673ab44a:   mov    %rbp,%r11
  0.22%  │  0x00007f5b673ab44d:   mov    0x10(%rbp),%r9               ;*getfield posL {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@15 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  6.12%  │  0x00007f5b673ab451:   movabs $0x60209cf08,%r8             ;   {oop(a &apos;jdk/internal/foreign/MemoryScope&apos;{0x000000060209cf08})}
  0.52%  │  0x00007f5b673ab45b:   mov    0xc(%r8),%r8d                ;*getfield activeCount {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.foreign.MemoryScope::checkAliveConfined@1 (line 77)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkValidState@24 (line 161)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@1 (line 174)
         │                                                            ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::checkAddress@15 (line 50)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::set0@7 (line 85)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::set@18
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJJ_V@38 (line 1003)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@25 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.10%  │  0x00007f5b673ab45f:   movslq %r10d,%rcx
  0.22%  │  0x00007f5b673ab462:   add    %r9,%rcx
  6.13%  │  0x00007f5b673ab465:   shl    $0x3,%rcx                    ;*lmul {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::set@14
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJJ_V@38 (line 1003)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@25 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.54%  │  0x00007f5b673ab469:   cmp    $0xffffffff,%r8d
         │  0x00007f5b673ab46d:   je     0x00007f5b673ab75c           ;*if_icmpne {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.foreign.MemoryScope::checkAliveConfined@5 (line 77)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkValidState@24 (line 161)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@1 (line 174)
         │                                                            ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::checkAddress@15 (line 50)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::set0@7 (line 85)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::set@18
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJJ_V@38 (line 1003)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@25 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.06%  │  0x00007f5b673ab473:   test   %rcx,%rcx
         │  0x00007f5b673ab476:   jl     0x00007f5b673ab6bc           ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkBounds@9 (line 196)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@29 (line 178)
         │                                                            ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::checkAddress@15 (line 50)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::set0@7 (line 85)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::set@18
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJJ_V@38 (line 1003)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@25 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.24%  │  0x00007f5b673ab47c:   cmp    $0x3ffffff8,%rcx
         │  0x00007f5b673ab483:   jg     0x00007f5b673ab7b0           ;*ifle {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkBounds@20 (line 196)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@29 (line 178)
         │                                                            ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::checkAddress@15 (line 50)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::set0@7 (line 85)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::set@18
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJJ_V@38 (line 1003)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@25 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  6.11%  │  0x00007f5b673ab489:   movabs $0x7f5a5bffe010,%r8
  0.58%  │  0x00007f5b673ab493:   add    %r8,%rcx
  0.05%  │  0x00007f5b673ab496:   mov    %r9,%r8
  0.18%  │  0x00007f5b673ab499:   shl    $0x3,%r8                     ;*lmul {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::get@14
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJ_J@36 (line 192)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@39 (line 74)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  6.03%  │  0x00007f5b673ab49d:   mov    %r9,(%rcx)                   ;*invokevirtual putLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.misc.Unsafe::putLongUnaligned@10 (line 3671)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::set0@38 (line 86)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::set@18
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJJ_V@38 (line 1003)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@25 (line 71)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  1.73%  │  0x00007f5b673ab4a0:   test   %r8,%r8
         │  0x00007f5b673ab4a3:   jl     0x00007f5b673ab710           ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkBounds@9 (line 196)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@29 (line 178)
         │                                                            ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::checkAddress@15 (line 50)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::get0@7 (line 76)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::get@16
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJ_J@36 (line 192)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@39 (line 74)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.09%  │  0x00007f5b673ab4a9:   cmp    $0x3ffffff8,%r8
         │  0x00007f5b673ab4b0:   jg     0x00007f5b673ab804           ;*ifle {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkBounds@20 (line 196)
         │                                                            ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@29 (line 178)
         │                                                            ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::checkAddress@15 (line 50)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::get0@7 (line 76)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::get@16
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJ_J@36 (line 192)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@39 (line 74)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.20%  │  0x00007f5b673ab4b6:   mov    %r10d,(%rsp)
  5.41%  │  0x00007f5b673ab4ba:   mov    %rbx,0x70(%rsp)
  0.97%  │  0x00007f5b673ab4bf:   mov    %rdi,0x60(%rsp)              ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@39 (line 74)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.06%  │  0x00007f5b673ab4c4:   movabs $0x7f5a5bffe010,%r10
  0.20%  │  0x00007f5b673ab4ce:   add    %r10,%r8
  5.66%  │  0x00007f5b673ab4d1:   mov    %r8,%r10
  1.14%  │  0x00007f5b673ab4d4:   mov    (%r10),%rdx                  ;*invokevirtual getLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.misc.Unsafe::getLongUnaligned@5 (line 3550)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs::get0@36 (line 77)
         │                                                            ; - java.lang.invoke.VarHandleMemoryAddressAsLongs1/0x0000000800bb1040::get@16
         │                                                            ; - java.lang.invoke.VarHandleGuards::guard_LJ_J@36 (line 192)
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@39 (line 74)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.14%  │  0x00007f5b673ab4d7:   mov    0x18(%rsp),%rsi
  0.26%  │  0x00007f5b673ab4dc:   data16 xchg %ax,%ax
  5.52%  │  0x00007f5b673ab4df:   callq  0x00007f5b5f806a80           ; ImmutableOopMap {rbp=Oop [96]=Oop [104]=Oop [24]=Oop }
         │                                                            ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@42 (line 74)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
         │                                                            ;   {optimized virtual_call}
 11.89%  │  0x00007f5b673ab4e4:   mov    (%rsp),%r10d
  0.67%  │  0x00007f5b673ab4e8:   inc    %r10d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - org.ad.MemoryHandlesBenchmark::rwMH@45 (line 70)
         │                                                            ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
  0.24%  │  0x00007f5b673ab4eb:   cmp    $0x186a0,%r10d
         ╰  0x00007f5b673ab4f2:   jl     0x00007f5b673ab440           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.ad.MemoryHandlesBenchmark::rwMH@5 (line 70)
                                                                      ; - org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub@17 (line 308)
            0x00007f5b673ab4f8:   mov    0x60(%rsp),%rdi
            0x00007f5b673ab4fd:   movzbl 0x94(%rdi),%r10d             ;*invokestatic currentThread {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - jdk.internal.foreign.MemorySegmentImpl::checkValidState@4 (line 158)
                                                                      ; - jdk.internal.foreign.MemorySegmentImpl::checkRange@1 (line 174)
                                                                      ; - jdk.internal.foreign.MemoryAddressImpl::checkAccess@21 (line 84)
....................................................................................................
 68.13%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 842 (75 bytes)

              0x00007f5b673a21a4:   shl    $0x3,%r10
              0x00007f5b673a21a8:   movabs $0x800000000,%r12
              0x00007f5b673a21b2:   add    %r12,%r10
              0x00007f5b673a21b5:   xor    %r12,%r12
              0x00007f5b673a21b8:   cmp    %r10,%rax
              0x00007f5b673a21bb:   jne    0x00007f5b5f806d80           ;   {runtime_call ic_miss_stub}
              0x00007f5b673a21c1:   data16 xchg %ax,%ax
              0x00007f5b673a21c4:   nopl   0x0(%rax,%rax,1)
              0x00007f5b673a21cc:   data16 data16 xchg %ax,%ax
            [Verified Entry Point]
  1.23%       0x00007f5b673a21d0:   mov    %eax,-0x14000(%rsp)
  5.66%       0x00007f5b673a21d7:   push   %rbp
  1.19%       0x00007f5b673a21d8:   sub    $0x20,%rsp
  0.27%       0x00007f5b673a21dc:   nopl   0x0(%rax)
  5.10%       0x00007f5b673a21e0:   cmpl   $0x1,0x70(%r15)
  1.22%  ╭    0x00007f5b673a21e8:   je     0x00007f5b673a21f3
         │    0x00007f5b673a21ee:   callq  Stub::nmethod_entry_barrier  ;*synchronization entry
         │                                                              ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 392)
         │                                                              ;   {runtime_call StubRoutines (2)}
  0.10%  ↘    0x00007f5b673a21f3:   mov    %rdx,%r10
  0.18%       0x00007f5b673a21f6:   xor    0x90(%rsi),%r10              ;*getfield l1 {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 392)
  5.91%       0x00007f5b673a21fd:   mov    %rdx,%r11
  1.22%       0x00007f5b673a2200:   xor    0xa0(%rsi),%r11              ;*lxor {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.jmh.infra.Blackhole::consume@17 (line 394)
  0.13%       0x00007f5b673a2207:   cmp    %r11,%r10
          ╭   0x00007f5b673a220a:   je     0x00007f5b673a221c           ;*ifne {reexecute=0 rethrow=0 return_oop=0}
          │                                                             ; - org.openjdk.jmh.infra.Blackhole::consume@19 (line 394)
  0.22%   │   0x00007f5b673a220c:   add    $0x20,%rsp
  5.38%   │   0x00007f5b673a2210:   pop    %rbp
  1.03%   │   0x00007f5b673a2211:   mov    0x110(%r15),%r10
  0.14%   │   0x00007f5b673a2218:   test   %eax,(%r10)                  ;   {poll_return}
  0.42%   │   0x00007f5b673a221b:   retq
          ↘   0x00007f5b673a221c:   cmp    %r11,%r10
              0x00007f5b673a221f:   mov    $0xffffffff,%ebp
           ╭  0x00007f5b673a2224:   jl     0x00007f5b673a222e
           │  0x00007f5b673a2226:   setne  %bpl
           │  0x00007f5b673a222a:   movzbl %bpl,%ebp                    ;*lcmp {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.jmh.infra.Blackhole::consume@18 (line 394)
           ↘  0x00007f5b673a222e:   mov    %rsi,(%rsp)
              0x00007f5b673a2232:   mov    %rdx,0x8(%rsp)
              0x00007f5b673a2237:   mov    $0xffffff45,%esi
              0x00007f5b673a223c:   data16 xchg %ax,%ax
....................................................................................................
 29.41%  <total for region 2>

....[Hottest Regions]...............................................................................
 68.13%         c2, level 4  org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub, version 891 (171 bytes)
 29.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 842 (75 bytes)
  0.22%           libjvm.so  ElfSymbolTable::lookup (54 bytes)
  0.12%  libpthread-2.17.so  [unknown] (4 bytes)
  0.10%        libc-2.17.so  syscall (8 bytes)
  0.09%  libpthread-2.17.so  __libc_nanosleep (42 bytes)
  0.08%           libjvm.so  fileStream::write (61 bytes)
  0.08%           libjvm.so  ShenandoahAdaptiveHeuristics::should_start_gc (55 bytes)
  0.05%           libjvm.so  os::elapsedTime (70 bytes)
  0.04%              kernel  [unknown] (0 bytes)
  0.04%           libjvm.so  xmlStream::write_text (44 bytes)
  0.04%        libc-2.17.so  _IO_fwrite (4 bytes)
  0.04%        libc-2.17.so  __clone (5 bytes)
  0.04%        libc-2.17.so  __clock_gettime (14 bytes)
  0.04%              [vdso]  __vdso_clock_gettime (6 bytes)
  0.04%        libc-2.17.so  _IO_fwrite (37 bytes)
  0.03%           libjvm.so  RelocIterator::initialize (22 bytes)
  0.03%        libc-2.17.so  __strchr_sse42 (66 bytes)
  0.03%           libjvm.so  xmlStream::write_text (44 bytes)
  0.03%              [vdso]  __vdso_clock_gettime (49 bytes)
  1.31%  <...other 202 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 68.14%         c2, level 4  org.ad.generated.MemoryHandlesBenchmark_rwMH_jmhTest::rwMH_avgt_jmhStub, version 891
 29.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 842
  0.22%           libjvm.so  ElfSymbolTable::lookup
  0.12%  libpthread-2.17.so  [unknown]
  0.10%        libc-2.17.so  vfprintf
  0.10%           libjvm.so  ShenandoahAdaptiveHeuristics::should_start_gc
  0.10%        libc-2.17.so  syscall
  0.09%        libc-2.17.so  _IO_fwrite
  0.09%  libpthread-2.17.so  __libc_nanosleep
  0.08%           libjvm.so  fileStream::write
  0.08%              [vdso]  __vdso_clock_gettime
  0.07%                      <unknown>
  0.07%              kernel  [unknown]
  0.07%           libjvm.so  xmlStream::write_text
  0.06%           libjvm.so  ShenandoahControlThread::run_service
  0.05%           libjvm.so  os::elapsedTime
  0.04%           libjvm.so  RelocIterator::initialize
  0.04%        libc-2.17.so  __clock_gettime
  0.04%        libc-2.17.so  __clone
  0.04%           libjvm.so  outputStream::do_vsnprintf_and_write_with_automatic_buffer
  1.00%  <...other 112 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 97.55%         c2, level 4
  1.20%           libjvm.so
  0.66%        libc-2.17.so
  0.30%  libpthread-2.17.so
  0.08%              [vdso]
  0.07%
  0.07%              kernel
  0.04%         interpreter
  0.02%          ld-2.17.so
  0.01%         classes.jsa
  0.00%         c1, level 3
  0.00%     perf-383953.map
....................................................................................................
100.00%  <totals>
